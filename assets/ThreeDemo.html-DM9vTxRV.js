import{_ as c,r as t,o as i,c as l,a as n,b as s,d as a,e as p}from"./app-D8oHFRX9.js";const r={},u=p(`<h3 id="初始化场景" tabindex="-1"><a class="header-anchor" href="#初始化场景"><span>初始化场景</span></a></h3><p>首先是分别创建场景、相机和渲染器，三者缺一不可，并将渲染器渲染的结果挂载到 DOM 元素上。最后将在<code>render</code>函数绑定到<code>requestAnimationFrame</code>上, 并执行渲染函数，每次重绘都会重新执行<code>render</code>函数。</p><ul><li>场景（scene）：场景一个物体的容器【通俗理解装东西的嘛】，开发者可以将需要的角色放入场景中,例如苹果，葡萄。同时， 角色自身也管理着其在场景中的位置。</li><li>相机（camera）：相机的作用就是面对场景,在场景中取一个合适的景，把它拍下来。【可以想象成人的眼睛】</li><li>渲染器（renderer）：渲染器的作用就是将相机拍摄下来的图片,放到浏览器中去显示。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建场景</span>
<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建相机</span>
<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span>
  <span class="token number">75</span><span class="token punctuation">,</span>
  window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>
  <span class="token number">0.1</span><span class="token punctuation">,</span>
  <span class="token number">1000</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建渲染器</span>
<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>
  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d={id:"创建几何体",tabindex:"-1"},k={class:"header-anchor",href:"#创建几何体"},m={href:"https://threejs.org/docs/?q=ge#api/zh/geometries/BoxGeometry",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>上面的场景都搭建好了，现在创建一个正方体，并将它加入到场景中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建几何体</span>
<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0x00ffff</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加辅助功能" tabindex="-1"><a class="header-anchor" href="#添加辅助功能"><span>添加辅助功能</span></a></h3><p>也可以为场景中添加辅助坐标和辅助相机，能让我们更清楚的观察到当前元素在坐标系中所处的位置和大小。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建辅助坐标轴</span>
<span class="token keyword">const</span> axes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AxesHelper</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>axes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建辅助相机</span>
<span class="token keyword">const</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>CameraHelper</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>helper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型控制" tabindex="-1"><a class="header-anchor" href="#模型控制"><span>模型控制</span></a></h3><p>场景中拥有了正方体，但我能并不能和它进行交互，因此需要 <code>OrbitControls</code> 来对场景中的内容能控制。需要注意的是 <code>OrbitControls</code> 是一个控制插件，并没有在 Three.js 的核心模块中，而是在<code>examples/jsm/controls/</code> 文件夹中，我们这里为了方便使用采用的是 CDN 的方式进行引入。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> OrbitControls <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;https://cdn.skypack.dev/three@0.132.2/examples/jsm/controls/OrbitControls.js&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 模型控制</span>
<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),h={id:"mvp",tabindex:"-1"},b={class:"header-anchor",href:"#mvp"},g={href:"https://brain.songxingguo.com/demo/Three/MVP.html",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"下面是通过上述步骤搭建的一个最新可行性 DEMO，你可以通过注释代码方式来动态观察每个部分不同的作用。",-1),_=n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code")]),n("div",{class:"line-numbers","aria-hidden":"true"})],-1);function w(f,x){const e=t("ExternalLinkIcon"),o=t("MVP");return i(),l("div",null,[u,n("h3",d,[n("a",k,[n("span",null,[s("创建"),n("a",m,[s("几何体"),a(e)])])])]),v,n("h3",h,[n("a",b,[n("span",null,[n("a",g,[s("MVP"),a(e)])])])]),y,a(o),_])}const T=c(r,[["render",w],["__file","ThreeDemo.html.vue"]]),j=JSON.parse('{"path":"/dv/three/getting_started/ThreeDemo.html","title":"快速上手DEMO","lang":"zh-CN","frontmatter":{"title":"快速上手DEMO","icon":"post","order":1,"author":"宋玉","date":"2024-04-13T00:00:00.000Z","category":["数据可视化"],"tag":["DEMO"],"description":"初始化场景 首先是分别创建场景、相机和渲染器，三者缺一不可，并将渲染器渲染的结果挂载到 DOM 元素上。最后将在render函数绑定到requestAnimationFrame上, 并执行渲染函数，每次重绘都会重新执行render函数。 场景（scene）：场景一个物体的容器【通俗理解装东西的嘛】，开发者可以将需要的角色放入场景中,例如苹果，葡萄。同时...","head":[["meta",{"property":"og:url","content":"https://brain.songxingguo.com/dv/three/getting_started/ThreeDemo.html"}],["meta",{"property":"og:site_name","content":"宋玉的世界"}],["meta",{"property":"og:title","content":"快速上手DEMO"}],["meta",{"property":"og:description","content":"初始化场景 首先是分别创建场景、相机和渲染器，三者缺一不可，并将渲染器渲染的结果挂载到 DOM 元素上。最后将在render函数绑定到requestAnimationFrame上, 并执行渲染函数，每次重绘都会重新执行render函数。 场景（scene）：场景一个物体的容器【通俗理解装东西的嘛】，开发者可以将需要的角色放入场景中,例如苹果，葡萄。同时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-26T07:12:27.000Z"}],["meta",{"property":"article:author","content":"宋玉"}],["meta",{"property":"article:tag","content":"DEMO"}],["meta",{"property":"article:published_time","content":"2024-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-26T07:12:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速上手DEMO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-26T07:12:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"宋玉\\"}]}"]]},"headers":[{"level":3,"title":"初始化场景","slug":"初始化场景","link":"#初始化场景","children":[]},{"level":3,"title":"创建几何体","slug":"创建几何体","link":"#创建几何体","children":[]},{"level":3,"title":"添加辅助功能","slug":"添加辅助功能","link":"#添加辅助功能","children":[]},{"level":3,"title":"模型控制","slug":"模型控制","link":"#模型控制","children":[]},{"level":3,"title":"MVP","slug":"mvp","link":"#mvp","children":[]}],"git":{"createdTime":1716707547000,"updatedTime":1716707547000,"contributors":[{"name":"宋兴国","email":"1328989942@qq.com","commits":1}]},"readingTime":{"minutes":1.98,"words":595},"filePathRelative":"dv/three/getting_started/ThreeDemo.md","localizedDate":"2024年4月13日","excerpt":"<h3>初始化场景</h3>\\n<p>首先是分别创建场景、相机和渲染器，三者缺一不可，并将渲染器渲染的结果挂载到 DOM 元素上。最后将在<code>render</code>函数绑定到<code>requestAnimationFrame</code>上, 并执行渲染函数，每次重绘都会重新执行<code>render</code>函数。</p>\\n<ul>\\n<li>场景（scene）：场景一个物体的容器【通俗理解装东西的嘛】，开发者可以将需要的角色放入场景中,例如苹果，葡萄。同时， 角色自身也管理着其在场景中的位置。</li>\\n<li>相机（camera）：相机的作用就是面对场景,在场景中取一个合适的景，把它拍下来。【可以想象成人的眼睛】</li>\\n<li>渲染器（renderer）：渲染器的作用就是将相机拍摄下来的图片,放到浏览器中去显示。</li>\\n</ul>","autoDesc":true}');export{T as comp,j as data};
